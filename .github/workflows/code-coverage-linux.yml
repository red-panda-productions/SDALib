name: CI Pipeline Code Coverage Linux

on:
  pull_request:
    branches: [ main ]

  # Allow manually triggering from the actions tab
  workflow_dispatch:


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

  # Enable colour output for GTEST and XML file generation
  GTEST_COLOR: yes
  GTEST_OUTPUT: xml:test-results/

jobs:
  build:
    # The CMake configure and build commands are platform agnostic anda should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: Debug
      BOOST_PATH: ${{github.workspace}}/libraries
      BOOST_ROOT: ${{github.workspace}}/libraries/Boost/include/boost
      BOOST_VERSION: 1.79.0

    steps:
    - uses: actions/checkout@v2

    - name: Install Compilers
      run: |
        sudo apt update
        sudo apt install gcc-11 g++-11
        sudo apt-get install gcc-11-multilib
        sudo apt-get install g++-11-multilib
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11

    - name: Install GCovr
      run: pip install gcovr

    - name: Install boost 32 bit
      run: |
        wget -O Boost.tar.gz https://github.com/KungFuDonkey/32BitBoost/releases/download/v1.79.0/Boost.tar.gz
        tar -C ${{env.BOOST_PATH}} -xzf Boost.tar.gz 

    - name: Configure CMake
      run: cmake -DOPTION_GITHUB_ACTIONS=ON -DCMAKE_C_FLAGS="-m32 -pthread" -DCMAKE_CXX_FLAGS="-m32 -pthread" -DBoost_INCLUDE_DIR=${{env.BOOST_ROOT}}/include -DBoost_LIBRARY_DIRS=${{env.BOOST_ROOT}}/lib -DOPTION_GITHUB_ACTIONS=ON -S ${{github.workspace}}/SDALib-CPP -B ${{runner.workspace}}/build

    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: cmake --build .

    - name: Run code coverage
      working-directory: ${{github.workspace}}
      run: ./coverage.sh

    - name: Check code coverage
      working-directory: ${{github.workspace}}
      run: cat coverage.xml

    - name: Create code coverage report
      uses: 5monkeys/cobertura-action@master
      with:
        path: ${{github.workspace}}/coverage.xml
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        minimum_coverage: 100
        fail_below_threshold: true
        show_missing: true
        link_missing_lines: true
        skip_covered: false
        report_name: 'code coverage report linux'
